<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            			http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            			http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			            http://www.springframework.org/schema/context
			            http://www.springframework.org/schema/context/spring-context-4.1.xsd
			            http://www.springframework.org/schema/mvc
			            http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
			            http://www.springframework.org/schema/util 
			            http://www.springframework.org/schema/util/spring-util-4.1.xsd
			            http://www.springframework.org/schema/aop 
			            http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"
       default-autowire="byName" default-lazy-init="false">

    <aop:aspectj-autoproxy/>
    <context:annotation-config/>
    <!-- 加载service,此时要排除要controller,因为controller已经spring-mvc中加载过了 -->
    <context:component-scan base-package="com.lianxing.logistics.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 数据库配置 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:db_config.properties"/>
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <!-- 指明是否在归还到池中前进行检验 -->
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${maxIdle}"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 最大等待时间.当没有可用连接时，连接池等待连接被规划的最大时间（以毫秒计数），超过时间抛出异常，如果设置为-1表示无限等待 -->
        <property name="maxWait" value="${maxWait}"/>
        <!--#给出一条简单的sql语句进行验证 -->
        <property name="validationQuery" value="${validationQuery}"/>
        <!--#在取出连接时进行有效验证 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- #连接的超时时间，默认为半小时。 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
    </bean>
    <!-- 将dataSource注入进JdbcTemplate 此标签注入由spring自行处理 -->
    <bean id="JdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- sessionFactory 配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
          destroy-method="destroy">
        <!-- 配置数据库 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- hibernate属性 -->
        <property name="hibernateProperties">
            <props>
                <!-- SQLServer SQL方言 -->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- 输出SQL语句 -->
                <prop key="hibernate.show_sql">false</prop>
                <!-- 格式化SQL语句 -->
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
                <!-- 允许查询缓存, 个别查询仍然需要被设置为可缓存的. -->
                <prop key="hibernate.cache.use_query_cache">false</prop>
            </props>
        </property>
        <!-- 注解方式配置 -->
        <property name="packagesToScan">
            <list>
                <value>com.lianxing.logistics.model</value>
            </list>
        </property>
    </bean>
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 引入jedis的properties配置文件 -->
    <!--<util:properties id="redisProps" location="classpath:redis_config.properties"/>-->

    <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" id="stringRedisSerializer"/>-->

    <!--<bean class="org.springframework.data.redis.serializer.JacksonJsonRedisSerializer" id="jacksonJsonRedisSerializer">-->
        <!--<constructor-arg type="java.lang.Class" value="java.lang.Object"/>-->
    <!--</bean>-->

    <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"-->
          <!--id="jdkSerializationRedisSerializer"/>-->

    <!--&lt;!&ndash;     <bean class="org.codehaus.jackson.map.ObjectMapper" id="jackObjMapper"/> &ndash;&gt;-->

    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxTotal" value="#{redisProps['redis.pool.maxActive']}"/>-->
        <!--<property name="maxIdle" value="#{redisProps['redis.pool.maxIdle']}"/>-->
        <!--<property name="maxWaitMillis" value="#{redisProps['redis.pool.maxWait']}"/>-->
        <!--<property name="testOnBorrow" value="#{redisProps['redis.pool.testOnBorrow']}"/>-->
    <!--</bean>-->

    <!--<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"-->
          <!--p:hostName="#{redisProps['redis.ip']}"-->
          <!--p:port="#{redisProps['redis.port']}"-->
          <!--p:timeout="#{redisProps['redis.timeout']}"-->
          <!--p:password="#{redisProps['redis.password']}"-->
          <!--p:database="#{redisProps['redis.database']}"-->
          <!--p:poolConfig-ref="jedisPoolConfig"-->
          <!--p:usePool="true"/>-->


    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"-->
          <!--p:connectionFactory-ref="redisConnectionFactory"-->
          <!--p:keySerializer-ref="stringRedisSerializer"-->
          <!--p:valueSerializer-ref="jacksonJsonRedisSerializer"-->
          <!--p:hashKeySerializer-ref="stringRedisSerializer"-->
          <!--p:hashValueSerializer-ref="jacksonJsonRedisSerializer"/>-->


    <!--<bean id="jedisPool" class="redis.clients.jedis.JedisPool">-->
        <!--<constructor-arg ref="jedisPoolConfig"/>-->
        <!--<constructor-arg value="#{redisProps['redis.ip']}"/>-->
        <!--<constructor-arg type="int" value="#{redisProps['redis.port']}"/>-->
        <!--<constructor-arg type="int" value="#{redisProps['redis.timeout']}"/>-->
        <!--<constructor-arg type="java.lang.String" value="#{redisProps['redis.password']}"/>-->
        <!--<constructor-arg type="int" value="#{redisProps['redis.database']}"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; redis配置 &ndash;&gt;-->
</beans>